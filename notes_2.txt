Importing
In Python, each .py file is a module, and we can import functions, variables, and classes from one module into another with the import statement. 
The name of a module is the filename (without the .py extension).

Game Loop
Video games are generally built using a game loop. The simplest game loop has 3 steps:

1. Check for player inputs
2. Update the game world
3. Draw the game to the screen

To create a good user experience, these 3 steps need to happen many times per second.

-=------------=====================================-=-=-=--------------------------------=================


from circleshape import *
from constants import *

class Player(CircleShape):
    def __init__(self, x, y):
        super().__init__(x, y, PLAYER_RADIUS)
        self.rotation = 0

    def triangle(self):
        forward = pygame.Vector2(0, 1).rotate(self.rotation)
        right = pygame.Vector2(0, 1).rotate(self.rotation + 90) * self.radius / 1.5
        a = self.position + forward * self.radius
        b = self.position - forward * self.radius - right
        c = self.position - forward * self.radius + right
        return [a, b, c]
    
    def draw(self, screen):
        pygame.draw.polygon(screen, "white", self.triangle(), 2)

    def rotate(self, dt):
        self.rotation += PLAYER_TURN_SPEED * dt

    def update(self, dt):
        keys = pygame.key.get_pressed()

        if keys[pygame.K_a]:
            self.rotate(-dt) # rotate left
        if keys[pygame.K_d]:
            self.rotate(dt) # rotate right


-=------------=====================================-=-=-=--------------------------------=================

Groups
Currently, we manually call .update() and .draw() on the player object, 
which means our game loop is going to get more and more cluttered as we add additional objects to the game. 
Fortunately, pygame has a solution!

The Group class is a container that holds and manages multiple game objects. 
We can organize our objects into various groups to track them more easily.

You can think of them as a sort of Venn diagram. 
An object can be in multiple groups at the same time! 

Creating and Using Groups
You can create a new empty group like this:

my_group = pygame.sprite.Group()

To add all instances of a Player to two groups, group_a and group_b in this example, 
we add a class variable (or static field) called containers to the class just like so 
(with literally this one line, you don't need to bother with adding this field to the class declaration):

Player.containers = (group_a, group_b)

After changing a static field like containers, make sure to create all Player objects after the change. 
This way, they will be correctly added to the groups.

You can iterate over objects in a group just like any other collection in Python:

for thing in group:
    thing.do_something(some_value)

You may also call the .update() method for every member of a group by calling it on the group itself:

group.update(dt)

